(defmacro newtype [name ty]
  (do
   (eval
     `(deftype %name [get %ty]))

   (eval
     `(defmodule %name
        (sig consume (Fn [%name] %ty))
        (defn consume [newtype]
          (let [reff (%(Symbol.prefix name 'get) &newtype)
                val (the %ty (Pointer.to-value (Unsafe.coerce reff)))
                _   (Unsafe.leak newtype)]
            val))

        (defn update [newtype f] (update-get newtype f))

        (private update-get)
        (hidden update-get)

        (private set-get)
        (hidden set-get)

        (private set-get!)
        (hidden set-get!)))))
