(defmodule Unsafe
  (sig unsafe-deref (Fn [(Ref a)] a))
  (defn unsafe-deref [r]
    (Pointer.to-value (Unsafe.coerce r))))

(defndynamic parse-eval [:rest strs] (eval (parse (String.concat (eval (cons 'array strs))))))

(defmacro newtype [-name -ty]
 (let [name (str -name) ty (str -ty)]
  (do
   (parse-eval
     "(deftype "name" [get "ty"])")

   (parse-eval
     "(defmodule "name"
        (sig consume (Fn ["name"] "ty"))
        (defn consume [newtype]
          (let [val (Unsafe.unsafe-deref ("name".get &newtype))
                _   (Unsafe.leak newtype)]
            val))

        (defn update [newtype val] (update-get newtype val))

        (private update-get)
        (hidden update-get)

        (private set-get)
        (hidden set-get)

        (private set-get!)
        (hidden set-get!))"))))
